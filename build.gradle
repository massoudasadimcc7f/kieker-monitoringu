apply plugin: 'application'
apply plugin: 'eclipse'

mainClassName = 'kieker.diagnosis.Main'
version = '1.1-SNAPSHOT'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
	compile 'net.sourceforge.teetime:teetime:2.0-SNAPSHOT'
	compile 'net.sourceforge.teetime-stages:teetime-stages:2.0-SNAPSHOT'
	compile 'net.kieker-monitoring:kieker:1.11'

	testCompile 'org.hamcrest:hamcrest-core:1.3'
	testCompile 'org.hamcrest:hamcrest-library:1.3'
	testCompile 'junit:junit:4.12'
}

apply plugin: 'checkstyle'
checkstyle {
	ignoreFailures = true
	showViolations = false
}

apply plugin: 'findbugs'
findbugs { 
	ignoreFailures = true 
	effort = "max"
	reportLevel = "low"

	excludeFilter = file('config/findbugs/excludeFilter.xml')
}

task createStartScript(type: CreateStartScripts) {
	mainClassName = project.mainClassName
	applicationName = 'start' 
	outputDir = new File(project.buildDir, 'scripts')
	classpath = jar.outputs.files + project.configurations.runtime 
}

def commonDistBinConfiguration = {
	into('lib') {
		from configurations.runtime
		from jar.archivePath 
		from 'licenses'
	}
	into ('example') { from 'example' }
	into('.') {
		from 'LICENSE'
	}
}

task distBinWin(type: Zip, dependsOn: [jar, createStartScript]) {
	description = 'Bundles the project as a JVM application with OS specific libs and script for Windows.'
	classifier = 'windows'

	configure commonDistBinConfiguration

	into ('bin') {
		from createStartScript.getWindowsScript()
	}
}

task distBinLinux(type: Tar, dependsOn: [jar, createStartScript]) {
	description = 'Bundles the project as a JVM application with OS specific libs and script for Linux.'
	classifier = 'linux'
	compression = Compression.GZIP

	configure commonDistBinConfiguration

	into ('bin') {
		from createStartScript.getUnixScript()
	}
}

task distAllBin(dependsOn: [distBinWin, distBinLinux]) {
	description = 'Bundles the project as a JVM application with OS specific libs and scripts for all platforms.'
}

def commonDistSrcConfiguration = {
	classifier 'src'

	into ('src') { from 'src' }
	into ('config') { from 'config' }
	into ('example') { from 'example' }
	into ('licenses') { from 'licenses' }
	
	from ('.') {
		include 'LICENSE'
		include 'README'
		include 'build.gradle'
	}
}

task distSrcZip(type: Zip) {
	configure commonDistSrcConfiguration
}

task distSrcTar(type: Tar) {
	configure commonDistSrcConfiguration
	compression = Compression.GZIP
}

task distAllSrc(dependsOn: [distSrcZip, distSrcTar]) {
	description = 'Bundles the source files of the project.'
}

def regexpReplaceInFile(File file, String searchExp, String replaceExp) {
	String contents = file.getText('UTF-8')
	contents = contents.replaceAll(searchExp, replaceExp)
	file.write(contents, 'UTF-8')
}

task updateLicenseHeaderYear() << {
	FileTree tree = fileTree(dir: 'src', include: '**/*.java')
	tree.each { File file ->
		regexpReplaceInFile(file, 'Copyright 20\\d\\d Kieker Project', 'Copyright 2015 Kieker Project')
	}
}
